---
# tasks file for kops
- name: "{{ role_action }} - {{ role_name }} {{ release_version }} {{ platform }}"
  debug:
    msg: "This is {{ role_action }} for {{ role_name }} version {{ release_version }} on {{ platform }}"

- name: "Create S3 bucket s3://{{ kubeatf.vars.s3_bucket_prefix }}-{{ release_version }}-{{ platform }}"
  s3:
    bucket: "{{ kubeatf.vars.s3_bucket_prefix }}-{{ release_version }}-{{ platform }}"
    mode: create
    region: "{{ kubeatf.vars.aws_region }}"
   
- name: "Generate cluster local dir"
  local_action:
    module: file
    state: directory
    path: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}"
    mode: 0755

- name: "Get profile.yml if created"
  local_action:
    module: stat
    path: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}/profile.yml"
  register: profilepath

- name: "Fail if it already exists"
  fail:
    msg: "Cluster already created!"
  when: (profilepath.stat.exists == true)

- name: "Copy Profile to Clusters Dir"
  local_action:
    module: shell
    cmd: "cp {{ full_profile_path }} {{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}/profile.yml"

- name: "Generate cluster config"
  local_action:
    module: shell
    cmd: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'RELEASES_DIR') }}/{{ role_name }}/{{ release_version }}/kops-{{ local_arch }} create cluster --name {{ kubeatf.vars.dns_zone_name }} --state s3://{{ kubeatf.vars.s3_bucket_prefix }}-{{ release_version }}-{{ platform }} --zones {{ kubeatf.vars.aws_zone }} {{ kubeatf.vars.additional_create_options }}"
  register: createresult
  failed_when: 'createresult.rc !=0 and "already exists" not in createresult.stderr'

- name: "Create cluster"
  local_action:
    module: shell
    cmd: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'RELEASES_DIR') }}/{{ role_name }}/{{ release_version }}/kops-{{ local_arch }} update cluster --name {{ kubeatf.vars.dns_zone_name }} --state s3://{{ kubeatf.vars.s3_bucket_prefix }}-{{ release_version }}-{{ platform }} --yes"
   
- name: "Wait until cluster is up/running"
  local_action:
    module: shell
    cmd: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'RELEASES_DIR') }}/{{ role_name }}/{{ release_version }}/kops-{{ local_arch }} validate cluster --name {{ kubeatf.vars.dns_zone_name }} --state s3://{{ kubeatf.vars.s3_bucket_prefix }}-{{ release_version }}-{{ platform }}"
  register: clusterresult
  until: clusterresult.rc == 0
  retries: 30
  delay: 20 

- name: "Extract kubeconfig"
  local_action:
    module: shell
    cmd: "KUBECONFIG={{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}/kubeconfig {{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'RELEASES_DIR') }}/{{ role_name }}/{{ release_version }}/kops-{{ local_arch }} export kubecfg --name {{ kubeatf.vars.dns_zone_name }} --state s3://{{ kubeatf.vars.s3_bucket_prefix }}-{{ release_version }}-{{ platform }} --config {{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}/kubeconfig"
