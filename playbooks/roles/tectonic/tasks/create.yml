---
# tasks file for tectonic
- name: "{{ role_action }} - {{ role_name }} {{ release_version }} {{ platform }}"
  debug:
    msg: "This is {{ role_action }} for {{ role_name }} version {{ release_version }} on {{ platform }}"
   
- name: "Generate cluster local dir"
  local_action:
    module: file
    state: directory
    path: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}"
    mode: 0755

- name: "Get profile.yml if created"
  local_action:
    module: stat
    path: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}/profile.yml"
  register: profilepath

- name: "Fail if it already exists"
  fail:
    msg: "Cluster already created!"
  when: (profilepath.stat.exists == true)

- name: "Copy Profile to Clusters Dir"
  local_action:
    module: copy
    src: "{{ full_profile_path }}"
    dest: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}/profile.yml"
    mode: 0644

- name: "Install on {{ platform }}"
  include: "tasks/create-{{ platform }}.yml"

- name: "Terraform get"
  local_action:
    module: shell
    cmd: "cd {{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }} && ./terraform get {{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'RELEASES_DIR') }}/{{ role_name }}/{{ release_version }}/tectonic/platforms/{{ platform }}"

- name: "Terraform apply"
  local_action:
    module: shell
    cmd: "cd {{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }} && ./terraform apply"
  register: tfapply

- name: "Terraform apply"
  debug:
    msg: "{{ tfapply.stdout_lines }}"

- name: "Copy kubeconfig to clusters dir"
  local_action:
    module: copy
    src: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}/generated/auth/kubeconfig"
    dest: "{{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }}/kubeconfig"
    mode: 0644
    
- name: "Wait until base pods are up/running"
  local_action:
    module: shell
    cmd: "cd {{ lookup('env', 'PROJECT_PATH') }}/{{ lookup('env', 'CLUSTERS_DIR') }}/{{ role_name }}-{{ release_version }}-{{ platform }} && kubectl --kubeconfig=kubeconfig get pods --all-namespaces"
  register: clusterresult
  until: (clusterresult.rc == 0) and ('Pending' not in clusterresult.stdout) and ('Creating' not in clusterresult.stdout) and ('Initial' not in clusterresult.stdout) and ('Error' not in clusterresult.stdout) and ('CrashLoop' not in clusterresult.stdout)
  retries: 30
  delay: 30
